/* eslint-disable no-console */
import { ApplicationRef } from '@angular/core';
import { serverConfig } from '../server-config';
import { renderWithSsr } from './angular-ssr';
import { pageCache } from './page-cache';

/**
 * Service for auto-generating pages based on configuration
 */
export class AutoGenerator {
  private intervals: NodeJS.Timeout[] = [];

  /**
   * Initialize auto-generation of pages based on configuration
   * @param bootstrap Function to bootstrap the Angular application
   */
  initialize(bootstrap: () => Promise<ApplicationRef>): void {
    console.log('Initializing auto page generation service');

    // Generate all pages immediately on startup
    this.generateAllPages(bootstrap);

    // Set up intervals for each page configuration
    serverConfig.autoGeneratedPages.forEach(pageConfig =>
      this.intervals.push(setInterval(() => this.generatePagesForConfig(bootstrap, pageConfig), pageConfig.interval)),
    );
  }

  /** Stop all auto-generation intervals */
  shutdown(): void {
    console.log('Shutting down auto page generation');
    this.intervals.forEach(interval => clearInterval(interval));
    this.intervals = [];
  }

  /** Generate all pages defined in the configuration */
  private generateAllPages(bootstrap: () => Promise<ApplicationRef>): void {
    serverConfig.autoGeneratedPages.forEach(pageConfig => this.generatePagesForConfig(bootstrap, pageConfig));
  }

  /** Generate pages for a specific configuration */
  private generatePagesForConfig(
    bootstrap: () => Promise<ApplicationRef>,
    pageConfig: (typeof serverConfig.autoGeneratedPages)[number],
  ): void {
    // Construct the full URL
    const fullUrl = `https://${serverConfig.DOMAIN}${pageConfig.path}`;

    // Pre-render the page
    renderWithSsr(bootstrap, fullUrl)
      .then(html => pageCache.set(fullUrl, html))
      .catch(err => console.error(`Error generating page ${fullUrl}:`, err));
  }
}

// Create a singleton instance
export const autoGenerateService = new AutoGenerator();
